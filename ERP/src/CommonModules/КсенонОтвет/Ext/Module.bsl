
#Область ОберткаОбъектов

Функция ОбернутьОбъект(Объект) Экспорт
	
	Возврат Новый Структура("type,guid", Объект.Метаданные().ПолноеИмя(), Строка(Объект.Ссылка.УникальныйИдентификатор()));
	
КонецФункции

Функция РазвернутьОбъект(ОбъектСтруктура) Экспорт
	
	Менеджер = Новый (СтрЗаменить(ОбъектСтруктура.type, ".", "Менеджер."));
	Возврат Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектСтруктура.guid));
	
КонецФункции 

#КонецОбласти

#Область Представления
	
Функция Процент()

	Возврат "%";
	
КонецФункции

Функция Рубль()

	Возврат "₽";
	
КонецФункции

Функция ПрайсЛист(ПрайсЛистОбъект, ИнформацияОРеферале=Неопределено) Экспорт
	
	ЭлементыПрайсЛиста = Новый Массив;
	
	Для Каждого ТарифСтрока Из ПрайсЛистОбъект.Тарифы Цикл
		
		ЭлементыПрайсЛиста.Добавить(Новый Структура("title,tariff,price,discount,amount,source_info",
			ТарифСтрока.Тариф.НаименованиеДляБота, ОбернутьОбъект(ТарифСтрока.Тариф), ЕдиницаИзмерения(ТарифСтрока.Стоимость, Рубль()),
			ЕдиницаИзмерения(ТарифСтрока.Скидка, Процент(), 2, "per"), ЕдиницаИзмерения(ТарифСтрока.Сумма, Рубль()), ИнформацияОРеферале));	
		
	КонецЦикла;		
	
	Возврат Новый Структура("self,price_items", ОбернутьОбъект(ПрайсЛистОбъект), ЭлементыПрайсЛиста);
	
КонецФункции

Функция ПрайсЛистПоПромокоду(ДанныеПромокода, ПромокодСтрока) Экспорт
		
	ИнформацияОРеферале = Новый Структура("promo_code,refer,recorder", ПромокодСтрока, ОбернутьОбъект(ДанныеПромокода.Реферал), ОбернутьОбъект(ДанныеПромокода.ИсточникПодписки));
	
	Результат = ПрайсЛист(ДанныеПромокода.ПрайсЛист, ИнформацияОРеферале);
	
	Возврат Результат;
	
КонецФункции

Функция ЕдиницаИзмерения(Значение, СимволИзмерения, Разряды=2, Измерение="rub")
	
	Возврат Новый Структура("value,unit_symbol,semicolons,currency", Значение * Pow(10, Разряды), СимволИзмерения, Разряды, Измерение);	
	
КонецФункции

Функция РазвернутьЕдиницуИзмерения(ЕденицаИзмерения)
	
	Возврат ЕденицаИзмерения.value / Pow(10, ЕденицаИзмерения.semicolons);	
	
КонецФункции

Функция ЕстьАналогичныйСчет(Клиент, ДанныеВыбранногоТарифа)
	
	НеоплаченыеСчета = Клиенты.НеоплаченыеСчета(Клиент);
	
	Если НеоплаченыеСчета = Неопределено Тогда
		
		Возврат Неопределено;	
		
	КонецЕсли;
	
	Для Каждого Счет Из НеоплаченыеСчета Цикл
		
		Если Счет.Тариф = РазвернутьОбъект(ДанныеВыбранногоТарифа.tariff) И
			Счет.БазоваяСтоимость = РазвернутьЕдиницуИзмерения(ДанныеВыбранногоТарифа.price) И
			Счет.СуммаДокумента = РазвернутьЕдиницуИзмерения(ДанныеВыбранногоТарифа.amount) Тогда
			
			Возврат Новый Структура(
				"self,subscription,counterparty,tariff,deadline,price,discount,amount",
				ОбернутьОбъект(Счет.Ссылка), ОбернутьОбъект(Счет.Подписка), ОбернутьОбъект(Счет.Контрагент), ДанныеВыбранногоТарифа.tariff, Счет.КрайнийСрокОплаты,
				ДанныеВыбранногоТарифа.price, ДанныеВыбранногоТарифа.discount, ДанныеВыбранногоТарифа.amount
			);			
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция СчетНаОплату(ТелеграмИД, ДанныеВыбранногоТарифа, ИдентификаторМетодаОплаты) Экспорт
	
	ДанныеОКлиенте = СессииТелеграм.ПолучитьКонтрагентаСессииИлиСоздать(
		ТелеграмИД, Перечисления.Бот.ПользовательскийБазовый);
		
	Клиент = ДанныеОКлиенте.Контрагент;	
	
	Если НЕ ДанныеОКлиенте.Создано Тогда
		
		ПараметрыОтвета = ЕстьАналогичныйСчет(Клиент, ДанныеВыбранногоТарифа);	
	
		Если ПараметрыОтвета <> Неопределено Тогда
			
			 Возврат Новый Структура("Параметры,Создано", ПараметрыОтвета, Ложь);	
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяПодписка = Документы.Подписка.СоздатьДокумент();
	НоваяПодписка.Клиент = Клиент;
	НоваяПодписка.Тариф = РазвернутьОбъект(ДанныеВыбранногоТарифа.tariff);
	Если ДанныеВыбранногоТарифа.source_info <> Неопределено Тогда
		ИнформацияОИсточнике = ДанныеВыбранногоТарифа.source_info;
		НоваяПодписка.Реферал = РазвернутьОбъект(ИнформацияОИсточнике.refer);
		НоваяПодписка.Промокод = ИнформацияОИсточнике.promo_code;
		НоваяПодписка.ИсточникПодписки = РазвернутьОбъект(ИнформацияОИсточнике.recorder);
	КонецЕсли;
	НоваяПодписка.БазоваяСтоимость = РазвернутьЕдиницуИзмерения(ДанныеВыбранногоТарифа.amount);
	НоваяПодписка.СуммаРегулярногоПлатежа = РазвернутьЕдиницуИзмерения(ДанныеВыбранногоТарифа.amount);
	НоваяПодписка.Статус = Перечисления.СтатусПодписки.Ожидает;
	НоваяПодписка.Дата = ТекущаяДата();
	НоваяПодписка.Записать(РежимЗаписиДокумента.Запись);
	
	НовыйСчет = Документы.СчетНаОплатуПодписки.СоздатьДокумент();
	НовыйСчет.ОбработкаЗаполнения(НоваяПодписка.Ссылка, Истина);
	НовыйСчет.ОжидаемыйСпособОплаты = Справочники.СпособОплаты.НайтиПоКоду(ИдентификаторМетодаОплаты, Истина);
	НовыйСчет.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	
	ПараметрыОтвета = Новый Структура("self,subscription,counterparty,tariff,deadline,price,discount,amount",
		ОбернутьОбъект(НовыйСчет), ОбернутьОбъект(НоваяПодписка), ОбернутьОбъект(Клиент), ДанныеВыбранногоТарифа.tariff, НовыйСчет.КрайнийСрокОплаты,
		ДанныеВыбранногоТарифа.price, ДанныеВыбранногоТарифа.discount, ДанныеВыбранногоТарифа.amount);
		
	Возврат Новый Структура("Параметры,Создано", ПараметрыОтвета, Истина);	
	
КонецФункции

Функция ИнформацияОСчетеНаОплату(ДанныеСчета) Экспорт
	
	ОтветСтруктура = Новый Структура("ok,error_message");
	
	Счет = РазвернутьОбъект(ДанныеСчета.self);	
    Счет = Счет.ПолучитьОбъект();
	
	Если Счет.ПометкаУдаления = Истина ИЛИ Счет.Проведен = Ложь ИЛИ Счет.СчетИстек() Тогда
		
		ОтветСтруктура.ok = Ложь;
		ОтветСтруктура.error_message = "Ошибка 404. Счет истек, создайте новый и попробуйте оплатить еще раз";
		Возврат ОтветСтруктура;
		
	ИначеЕсли ЗначениеЗаполнено(Счет.Оплата) Тогда	
		
		ОтветСтруктура.ok = Ложь;
		ОтветСтруктура.error_message = "Счет уже оплачен";
		Возврат ОтветСтруктура;
		
	ИначеЕсли Счет.Тариф <> РазвернутьОбъект(ДанныеСчета.tariff) ИЛИ
		Счет.БазоваяСтоимость <> РазвернутьЕдиницуИзмерения(ДанныеСчета.price) ИЛИ
		Счет.СуммаДокумента <> РазвернутьЕдиницуИзмерения(ДанныеСчета.amount) ИЛИ
		Счет.Подписка <> РазвернутьОбъект(ДанныеСчета.subscription) ИЛИ
		Счет.Контрагент <> РазвернутьОбъект(ДанныеСчета.counterparty) Тогда
		
		ОтветСтруктура.ok = Ложь;
		ОтветСтруктура.error_message = "Ошибка 409. Обратитесь в поддержку";
		Возврат ОтветСтруктура;
		
	Иначе
		
		ОтветСтруктура.ok = Истина;
		Возврат ОтветСтруктура;
		
	КонецЕсли; 
	
КонецФункции

Функция Оплата(ДанныеСчета) Экспорт
				
	Счет = РазвернутьОбъект(ДанныеСчета.self);	
    Счет = Счет.ПолучитьОбъект();
	ОплатаПодпискиВызовСервера.ЗавершениеПервойОплаты(Счет);
	Подписка = Счет.Подписка.ПолучитьОбъект();
	ОтветСтруктура = Новый Структура("next_payment_datetime,period_text,vpn_conf",
		Подписка.ДатаСледующейОплаты(),
		НРег(Подписка.Тариф.ПериодПодписки.Метаданные().Синоним),
		"*config*");  //TODO config
	Возврат ОтветСтруктура;
	
КонецФункции

#КонецОбласти
