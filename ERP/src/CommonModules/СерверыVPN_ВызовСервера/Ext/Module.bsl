
#Область НаПереработку
// TODO
Функция ВыбратьОптимальнуюКонфигурацию(РегионСсылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сервер.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ СЕРВЕРА_ВТ
		|ИЗ
		|	Справочник.Сервер КАК Сервер
		|ГДЕ
		|	(&РегионСсылка = ЗНАЧЕНИЕ(Справочник.ГеографическийРегион.ПустаяСсылка)
		|			ИЛИ Сервер.РегионСервера = &РегионСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(1) КАК КоличествоЗанято,
		|	СлотыКонфигураций.Сервер КАК Сервер,
		|	СлотыКонфигураций.ИмяКонфигурации КАК ИмяКонфигурации
		|ПОМЕСТИТЬ ЗАНЯТО_СЛОТОВ_ВТ
		|ИЗ
		|	СЕРВЕРА_ВТ КАК СЕРВЕРА_ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СлотыКонфигураций КАК СлотыКонфигураций
		|		ПО (СлотыКонфигураций.Сервер = СЕРВЕРА_ВТ.Ссылка)
		|ГДЕ
		|	СлотыКонфигураций.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусСлотаКонфигурации.Свободен)
		|
		|СГРУППИРОВАТЬ ПО
		|	СлотыКонфигураций.Сервер,
		|	СлотыКонфигураций.ИмяКонфигурации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗАНЯТО_СЛОТОВ_ВТ.Сервер КАК Сервер,
		|	ЗАНЯТО_СЛОТОВ_ВТ.ИмяКонфигурации КАК ИмяКонфигурации,
		|	ВЫБОР
		|		КОГДА ЗАНЯТО_СЛОТОВ_ВТ.КоличествоЗанято = 0
		|				ИЛИ ЗАНЯТО_СЛОТОВ_ВТ.Сервер.МаксимумСлотов = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЗАНЯТО_СЛОТОВ_ВТ.КоличествоЗанято / ЗАНЯТО_СЛОТОВ_ВТ.Сервер.МаксимумСлотов
		|	КОНЕЦ КАК КоэфициентЗанятости,
		|	ЗАНЯТО_СЛОТОВ_ВТ.Сервер.РегионСервера КАК РегионСервера
		|ИЗ
		|	ЗАНЯТО_СЛОТОВ_ВТ КАК ЗАНЯТО_СЛОТОВ_ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонфигурацииСервера КАК КонфигурацииСервера
		|		ПО (КонфигурацииСервера.Сервер = ЗАНЯТО_СЛОТОВ_ВТ.Сервер)
		|			И (КонфигурацииСервера.ИмяКонфигурации = ЗАНЯТО_СЛОТОВ_ВТ.ИмяКонфигурации)
		|ГДЕ
		|	ЗАНЯТО_СЛОТОВ_ВТ.КоличествоЗанято < КонфигурацииСервера.МаксимумСлотов
		|
		|УПОРЯДОЧИТЬ ПО
		|	КоэфициентЗанятости";
	
	Запрос.УстановитьПараметр("РегионСсылка", РегионСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		//СтатусКонфигурации = WGD_Соединение.ПолучитьСтатусКонфигурации(ВыборкаДетальныеЗаписи.ИмяКонфигурации, ВыборкаДетальныеЗаписи.Сервер);
		//Если СтатусКонфигурации = Перечисления.СтатусКонфигурации.Ок Тогда
		//	
		//	Возврат Новый Структура("ИмяКонфигурации,Сервер,РегионСервера",
		//		ВыборкаДетальныеЗаписи.ИмяКонфигурации, ВыборкаДетальныеЗаписи.Сервер, ВыборкаДетальныеЗаписи.РегионСервера
		//	);	
		//	
		//КонецЕсли;
		//
	КонецЦикла;
	
	Возврат Неопределено;
		
КонецФункции

Функция СоздатьСлот(КонтрагентСсылка, РегионСсылка=Неопределено) Экспорт
	
	ОптимальнаяКонфигурация = ВыбратьОптимальнуюКонфигурацию(РегионСсылка);
	
	Если ОптимальнаяКонфигурация = Неопределено Тогда		
		ВызватьИсключение "Не удалось подобрать конфигурацию";
	КонецЕсли;
	
	ВремяСоздания = ТекущаяДата();
	Постфикс = Формат(ВремяСоздания, "ДФ=_ггггММдд_ЧЧммсс");
	ТелеграмИД = РегистрыСведений.СессииТелеграм.ПолучитьТелеграмИД(КонтрагентСсылка, Перечисления.Бот.Пользовательский);
	ИмяСлота = СтрЗаменить(Строка(ТелеграмИД), Символы.НПП, "") + Постфикс;
	
	ИнформацияОНовомСлоте = WGD_Соединение.СоздатьСлотКонфигурации(
		ОптимальнаяКонфигурация.ИмяКонфигурации,
		ОптимальнаяКонфигурация.Сервер,
		ИмяСлота
	);
	
	Если НЕ ИнформацияОНовомСлоте.status Тогда
		ВызватьИсключение "Не удалось создать слот, сервер вернул ошибку" + ОписаниеОшибки();		
	КонецЕсли;
	
	ИдСлота = ИнформацияОНовомСлоте.data[0].id;
	
	ДанныеСлота = WGD_Соединение.ПолучитьДанныеСлотаКонфигурации(
		ОптимальнаяКонфигурация.ИмяКонфигурации,
		ОптимальнаяКонфигурация.Сервер,
		ИдСлота
	);
	
	РегистрыСведений.СлотыКонфигураций.СохранитьСлот(
		ОптимальнаяКонфигурация.Сервер,
		ОптимальнаяКонфигурация.ИмяКонфигурации,
		ИдСлота,
		КонтрагентСсылка,
		ИмяСлота,
		ДанныеСлота.data.file,
		Перечисления.СтатусСлотаКонфигурации.Используется
	);
	
	Возврат Новый Структура(
		"ИмяФайла,Файл", 
	    ЗаполнитьНазваниеФайлаСлучайныймиЦифрами(ОптимальнаяКонфигурация.РегионСервера.ИдентификаторДляФайла),
		ДанныеСлота.data.file
	);
	
КонецФункции

#КонецОбласти

Процедура УдалитьКонфигурацию(СерверСсылка, ИмяКонфигурации) Экспорт
	
	НаборЗаписей = РегистрыСведений.КонфигурацииСервера.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сервер.Установить(СерверСсылка);
	НаборЗаписей.Отбор.ИмяКонфигурации.Установить(ИмяКонфигурации);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.СлотыКонфигураций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сервер.Установить(СерверСсылка);
	НаборЗаписей.Отбор.ИмяКонфигурации.Установить(ИмяКонфигурации);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ВыбратьСлот(КонтрагентСсылка, РегионСсылка=Неопределено) Экспорт
	
	
	
КонецФункции

Функция ЗаполнитьНазваниеФайлаСлучайныймиЦифрами(ИдентификаторДляФайла)
	
	Возврат ИдентификаторДляФайла + "_" + ОбщегоНазначения.ГенерироватьСлучайнуюПоследовательностьБуквЦифр(4, Истина);
	
КонецФункции

Функция ПодключитьКонфигурацию(ИмяКонфигурации, СерверСсылка, ЛимитСлотов) Экспорт
	
	СтатусКонфигурации = WGD_Соединение.ПолучитьСтатусКонфигурации(ИмяКонфигурации, СерверСсылка, Истина);
	
	Если СтатусКонфигурации = Перечисления.СтатусКонфигурации.Ок ИЛИ
			СтатусКонфигурации = Перечисления.СтатусКонфигурации.Выключена Тогда		
			
		Попытка
			ДанныеГенерации = WGD_Соединение.ГенерироватьСлотыКонфигурации(ИмяКонфигурации, СерверСсылка, ЛимитСлотов);
		Исключение
			Возврат Перечисления.СтатусКонфигурации.ОшибкаЗапроса;	
		КонецПопытки;
		
		Если НЕ ДанныеГенерации.status Тогда
			Возврат Перечисления.СтатусКонфигурации.ОшибкаЗапроса;	
		КонецЕсли;
		
		РегистрыСведений.КонфигурацииСервера.ДобавитьНовуюКонфигурацию(СерверСсылка, ИмяКонфигурации, ЛимитСлотов);
		РегистрыСведений.СлотыКонфигураций.ДобавитьСлотыИзОтветаСервера(ДанныеГенерации, СерверСсылка, ИмяКонфигурации);
		
	КонецЕсли;
	
	Возврат СтатусКонфигурации;
	
КонецФункции