
#Область ОберткаОбъектов

Функция ОбернутьОбъект(Объект)
	
	Возврат Новый Структура("type,guid", Объект.Метаданные().ПолноеИмя(), Строка(Объект.Ссылка.УникальныйИдентификатор()));
	
КонецФункции

Функция РазвернутьОбъект(ОбъектСтруктура)
	
	Менеджер = Новый (СтрЗаменить(ОбъектСтруктура.type, ".", "Менеджер."));
	Возврат Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектСтруктура.guid));
	
КонецФункции 

#КонецОбласти

#Область Представления
	
Функция Процент()

	Возврат "%";
	
КонецФункции

Функция Рубль()

	Возврат "₽";
	
КонецФункции

Функция ПрайсЛист(ПрайсЛистОбъект, ИнформацияОРеферале=Неопределено) Экспорт
	
	ЭлементыПрайсЛиста = Новый Массив;
	
	Для Каждого ТарифСтрока Из ПрайсЛистОбъект.Тарифы Цикл
		
		ЭлементыПрайсЛиста.Добавить(Новый Структура("title,tariff,price,discount,amount,source_info",
			ТарифСтрока.Тариф.НаименованиеДляБота, ОбернутьОбъект(ТарифСтрока.Тариф), ЕдиницаИзмерения(ТарифСтрока.Стоимость, Рубль()),
			ЕдиницаИзмерения(ТарифСтрока.Скидка, Процент(), 2, "per"), ЕдиницаИзмерения(ТарифСтрока.Сумма, Рубль()), ИнформацияОРеферале));	
		
	КонецЦикла;		
	
	Возврат Новый Структура("self,price_items", ОбернутьОбъект(ПрайсЛистОбъект), ЭлементыПрайсЛиста);
	
КонецФункции

Функция ПрайсЛистПоПромокоду(ДанныеПромокода, ПромокодСтрока) Экспорт
		
	ИнформацияОРеферале = Новый Структура("promo_code,refer,recorder", ПромокодСтрока, ОбернутьОбъект(ДанныеПромокода.Реферал), ОбернутьОбъект(ДанныеПромокода.ИсточникПодписки));
	
	Результат = ПрайсЛист(ДанныеПромокода.ПрайсЛист, ИнформацияОРеферале);
	
	Возврат Результат;
	
КонецФункции

Функция ЕдиницаИзмерения(Значение, СимволИзмерения, Разряды=2, Измерение="rub")
	
	Возврат Новый Структура("value,unit_symbol,semicolons,currency", Значение * Pow(10, Разряды), СимволИзмерения, Разряды, Измерение);	
	
КонецФункции

Функция РазвернутьЕдиницуИзмерения(ЕденицаИзмерения)
	
	Возврат ЕденицаИзмерения.value / (10 * ЕденицаИзмерения.semicolons);	
	
КонецФункции

Функция ЕстьАналогичныйСчет(Клиент, ДанныеВыбранногоТарифа)
	
	НеоплаченыеСчета = КлиентыНаСервере.НеоплаченыеСчета(Клиент);
	
	Если НеоплаченыеСчета = Неопределено Тогда
		
		Возврат Неопределено;	
		
	КонецЕсли;
	
	Для Каждого Счет Из НеоплаченыеСчета Цикл
		
		Если Счет.Тариф = РазвернутьОбъект(ДанныеВыбранногоТарифа.tariff) И
			Счет.БазоваяСтоимость = РазвернутьЕдиницуИзмерения(ДанныеВыбранногоТарифа.price) И
			Счет.СуммаДокумента = РазвернутьЕдиницуИзмерения(ДанныеВыбранногоТарифа.amount) Тогда
			
			Возврат Новый Структура("self,subscription,tariff,deadline,price,discount,amount",
				ОбернутьОбъект(Счет), ОбернутьОбъект(Счет.Подписка), ДанныеВыбранногоТарифа.tariff, Счет.КрайнийСрокОплаты,
				ДанныеВыбранногоТарифа.price, ДанныеВыбранногоТарифа.discount, ДанныеВыбранногоТарифа.amount);			
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция Счет(ТелеграмИД, ДанныеВыбранногоТарифа) Экспорт
	
	ДанныеОКлиенте = СессииТелеграмНаСервере.ПолучитьКонтрагентаСессииИлиСоздать(
		ТелеграмИД, Перечисления.Бот.ПользовательскийБазовый);
		
	Клиент = ДанныеОКлиенте.Контрагент;	
	
	Если НЕ ДанныеОКлиенте.Создано Тогда
		
		ПараметрыОтвета = ЕстьАналогичныйСчет(Клиент, ДанныеВыбранногоТарифа);	
	
		Если ПараметрыОтвета <> Неопределено Тогда
			
			 Возврат Новый Структура("Параметры,Создано", ПараметрыОтвета, Ложь);	
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяПодписка = Документы.Подписка.СоздатьДокумент();
	НоваяПодписка.Клиент = Клиент;
	НоваяПодписка.Тариф = РазвернутьОбъект(ДанныеВыбранногоТарифа.tariff);
	Если ДанныеВыбранногоТарифа.source_info <> Неопределено Тогда
		ИнформацияОИсточнике = ДанныеВыбранногоТарифа.source_info;
		НоваяПодписка.Реферал = РазвернутьОбъект(ИнформацияОИсточнике.refer);
		НоваяПодписка.Промокод = ИнформацияОИсточнике.promo_code;
		НоваяПодписка.ИсточникПодписки = РазвернутьОбъект(ИнформацияОИсточнике.recorder);
	КонецЕсли;
	НоваяПодписка.БазоваяСтоимость = РазвернутьЕдиницуИзмерения(ДанныеВыбранногоТарифа.price);
	НоваяПодписка.СуммаРегулярногоПлатежа = РазвернутьЕдиницуИзмерения(ДанныеВыбранногоТарифа.amount);
	НоваяПодписка.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	
	НовыйСчет = Документы.СчетНаОплатуПодписки.СоздатьДокумент();
	НовыйСчет.ОбработкаЗаполнения(НоваяПодписка.Ссылка, Истина);
	НовыйСчет.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	
	ПараметрыОтвета = Новый Структура("self,subscription,tariff,deadline,price,discount,amount",
		ОбернутьОбъект(НовыйСчет), ОбернутьОбъект(НоваяПодписка), ДанныеВыбранногоТарифа.tariff, НовыйСчет.КрайнийСрокОплаты,
		ДанныеВыбранногоТарифа.price, ДанныеВыбранногоТарифа.discount, ДанныеВыбранногоТарифа.amount);
		
	Возврат Новый Структура("Параметры,Создано", ПараметрыОтвета, Истина);	
	
КонецФункции
	
#КонецОбласти
